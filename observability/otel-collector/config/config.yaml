receivers:
  # tracing
  otlp:
    # combined tracing/metrics
    protocols:
      grpc:
        # endpoint: 0.0.0.0:55680
        # tls_settings:
        #   key_file: /key.pem
        #   cert_file: /cert.pem
      # http:
  jaeger:
    protocols:
      grpc:
        # endpoint: 0.0.0.0:14250
        # tls_settings:
        #   cert_file: /test.crt
        #   key_file: /test.key
      # thrift_http: # 14268
      # thrift_compact: # 6831
      # thrift_binary: # 6832

  # metrics
  # replace node-exporter?
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      processes:
      swap:
      process:

  # replaces prometheus scraping
  prometheus:
    config:
      scrape_configs:
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-apiservers
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - action: keep
              regex: default;kubernetes;https
              source_labels:
                - __meta_kubernetes_namespace
                - __meta_kubernetes_service_name
                - __meta_kubernetes_endpoint_port_name
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$1/proxy/metrics
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - action: keep
              regex: true
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (.+)
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
                - __address__
                - __meta_kubernetes_pod_annotation_prometheus_io_port
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
                - __meta_kubernetes_namespace
              target_label: kubernetes_namespace
            - action: replace
              source_labels:
                - __meta_kubernetes_pod_name
              target_label: kubernetes_pod_name

processors:
  memory_limiter:
    ballast_size_mib: 33
    limit_mib: 160
    spike_limit_mib: 50
    check_interval: 5s
  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 15.3
  span/traefik_noise:
    name:
      from_attributes:
        - operation
    exclude:
      match_type: regexp
      services:
        - traefik
      span_names:
        - ".*ping@internal.*"
        - ".*prometheus@internal.*"
  batch:

exporters:
  # logging:
  prometheus:
    endpoint: "0.0.0.0:8080"
  jaeger:
    endpoint: "jaeger.default.svc.cluster.local:14250"
    sending_queue:
      enabled: true
    insecure: true
    # ca_file:
    # cert_file:
    # key_file:

extensions:
  health_check: {}

service:
  extensions:
    - health_check
  pipelines:
    metrics:
      receivers:
        - otlp
        - hostmetrics
        - prometheus
      processors:
        - memory_limiter
        - batch
      exporters:
        - prometheus
    traces:
      receivers:
        - otlp
        - jaeger
      processors:
        - memory_limiter
        - span/traefik_noise
        # - probabilistic_sampler
        - batch
      exporters:
        - jaeger
